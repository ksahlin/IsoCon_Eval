"""
    snakemake --keep-going -j 999999 --cluster "sbatch --exclude={cluster.exclude} -c {cluster.ntasks} -N {cluster.Nodes}  -t {cluster.runtime} -J {cluster.jobname} --mail-type={cluster.mail_type} --mail-user={cluster.mail}" --cluster-config cluster.json --configfile experiments.json --latency-wait 100 --verbose plots quality -n
"""
# PATH=$PATH:/nfs/brubeck.bx.psu.edu/scratch4/software/pacbio/smrtlink/smrtcmds/bin &&

shell.prefix("set -o pipefail; ")
# configfile: "experiments.json"

####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def parse_gnu_time(stderr_file):
    lines = open(stderr_file, 'r').readlines()
    print(lines)
    for l in lines:
        usertime_match =  re.search('User time \(seconds\): [\d.]+', l)
        wct_match = re.search('Elapsed \(wall clock\) time \(h:mm:ss or m:ss\): [\d.:]+', l) 
        mem_match = re.search('Maximum resident set size \(kbytes\): [\d.:]+', l) 
        if usertime_match:
            usertime = float(usertime_match.group().split(':')[1].strip())
        if wct_match:
            wallclocktime = wct_match.group().split()[7]
        if mem_match:
            mem_tmp = int(mem_match.group().split()[5])
            memory_gb = mem_tmp / 4000000.0 

    vals = list(map(lambda x: float(x), wallclocktime.split(":") ))
    if len(vals) == 3:
        h,m,s = vals
        tot_wallclock_secs = h*3600.0 + m*60.0 + s
    elif len(vals) == 2:
        m,s = vals
        tot_wallclock_secs = m*60.0 + s

    return usertime, tot_wallclock_secs, memory_gb


def read_fasta(fasta_file):
    fasta_seqs = {}
    k = 0
    temp = ''
    accession = ''
    for line in fasta_file:
        if line[0] == '>' and k == 0:
            accession = line[1:].strip().split()[0]
            fasta_seqs[accession] = ''
            k += 1
        elif line[0] == '>':
            yield accession, temp
            temp = ''
            accession = line[1:].strip().split()[0]
        else:
            temp += line.strip()
    if accession:
        yield accession, temp




#quality table
quality_table = config["ROOT"]+"results/output_table.tsv"

# performance table
# performance  =  expand(config["ROOT"]+ "results/{EXPERIMENT_ID}/{experiment}/{tool}/performance_table.tex", EXPERIMENT_ID=config["EXPERIMENT_ID"], experiment=config["EXPERIMENTS"], tool = config["TOOLS"]),


TARGET_FILES = {}
TARGET_FILES['quality'] = quality_table
# TARGET_FILES['performance'] = performance


rule all:
    input: TARGET_FILES["quality"]

# rule performance:
#         input: TARGET_FILES["performance"]

# rule all:
#     input: TARGET_FILES["quality"], TARGET_FILES["performance"]


#####################################################


rule get_indata:
    input: transcript = config["TRANSCRIPTS"] + "{gene_member}.fa"
    output: pacbio_reads = config["ROOT"] + "pacbio_reads/{gene_member}_{ed}_{abundance}_{read_count}_{run_id}.fa",
            reference    = config["ROOT"] + "biological_material/{gene_member}_{ed}_{abundance}_{read_count}_{run_id}.fa"
    run:
        scriptfolder = config["SCRIPT_FOLDER"]
        shell("python3 {scriptfolder}generate_indata.py --transcript {input.transcript} \
                                                  --ed {wildcards.ed} \
                                                  --abundance_ratio {wildcards.abundance} \
                                                  --read_count {wildcards.read_count} \
                                                  {output.pacbio_reads} \
                                                  {output.reference} ")




rule ISOCON:
    input: fl_reads = rules.get_indata.output.pacbio_reads
    output: 
            consensus_transcripts = config["ROOT"] + "cluster_output/ISOCON/{gene_member}_{ed}_{abundance}_{read_count}_{run_id}/final_candidates.fa",
            candidate_transcripts = config["ROOT"] + "cluster_output/ISOCON/{gene_member}_{ed}_{abundance}_{read_count}_{run_id}/candidates_converged.fa"
    run:
        # time = config["GNUTIME"]
        isocon_folder = config["ISOCON_FOLDER"]
        out_folder, file_prefix = os.path.split("{0}".format(output.candidate_transcripts))
        # out_folder= config["ROOT"] + "cluster_output/" + config["EXPERIMENT_ID"] + "/original_output/{0}/ISOCON/{1}_{2}_{3}_{4}_{5}_{6}/".format(wildcards.experiment, wildcards.gene_member, wildcards.family_size, wildcards.abundance, wildcards.mutation_rate, wildcards.read_count, wildcards.run_id) # "~/tmp/tmp_HITEM_{0}_{1}_{2}_{3}/".format(wildcards.gene_member, wildcards.family_size, wildcards.isoform_distribution, wildcards.mutation_rate)
        shell("mkdir -p {out_folder}")
        shell("python {isocon_folder}IsoCon pipeline -fl_reads {input.fl_reads} -outfolder {out_folder} --cleanup ")



rule transcript_captured:
    input: isocon_consensus = rules.ISOCON.output.consensus_transcripts,
            transcript = rules.get_indata.output.reference,
    output: evaluation_line = config["ROOT"] + "evaluation/{gene_member}_{ed}_{abundance}_{read_count}_{run_id}.tsv"
    run:
        isocon_cons = set( [seq for (acc, seq) in  read_fasta(open(input.isocon_consensus, 'r'))])
        mutated_transcript_set = set([seq for (acc, seq) in  read_fasta(open(input.transcript, 'r')) ])
        mutated_transcript = mutated_transcript_set.pop()
        assert len(mutated_transcript_set) == 0
        is_captured = "yes" if mutated_transcript in isocon_cons else "no"
        outfile = open("{0}".format(output.evaluation_line), "w")
        outfile.write("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n".format(wildcards.gene_member, wildcards.ed, wildcards.abundance, wildcards.read_count, wildcards.run_id, is_captured))
        outfile.close()

rule table:
   input: files = lambda wildcards: expand(rules.transcript_captured.output.evaluation_line, gene_member=config["GENE_MEMBERS"], ed=config["EDIT_DISTANCES"], abundance=config["ABUNDANCES"], read_count = config["READ_COUNTS"], run_id = config["RUNS"])
   output: outfile=config["ROOT"]+"results/output_table.tsv"
   run:
        shell("cat {input.files} > {output.outfile} ")


